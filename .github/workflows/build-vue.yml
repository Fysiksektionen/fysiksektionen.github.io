# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Build

on:
  push:
    paths:
      - '**.vue'
      - '**.ts'
      - '**.js'
      - '**.json'
      - '**.mscz'
      - '**.conf'
      - 'Dockerfile'
      - '.Dockerignore'
      - '**/build-vue.yml'
  pull_request:
    branches: [ main, vue ]
  workflow_dispatch:
    inputs:
      skip-compression:
        description: "Skip svg optimization (faster) (this setting doesn't work)"
        required: true
        default: "false"

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: fysiksektionen/sangbok-html

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build vue
    needs: sheet-music
    strategy:
      matrix:
        node-version: [14.x, 16.x]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - name: Install packages
      run: npm ci
    - name: Fetch sheet music artifacts
      uses: actions/download-artifact@v2
      with:
        name: music-svgs
        path: public/msvg
    - name: Unpack sheet music artifacts
      working-directory: public/msvg
      run: mv svgs.json ../../src/assets/msvgs.json
    - name: build
      run: npx vue-cli-service build
    - name: Archive production artifacts
      uses: actions/upload-artifact@v2
      if: ${{ matrix.node-version == '16.x' }}
      with:
        name: dist-node-${{ matrix.node-version }}
        path: |
          dist

  sheet-music:
    runs-on: ubuntu-latest
    name: Generate sheet music resources
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js 16.x
      uses: actions/setup-node@v2
      with:
        node-version: 16.x
        cache: 'npm'
    - name: Install svgo
      run: npm install -g svgo
    - name: Install MuseScore 3
      run: sudo apt-get update && sudo apt-get install musescore3
    - name: Convert mscz to non-compressed svg:s
      working-directory: ./music
      run: ./convert.sh --no-move --force
      if: ${{ contains(github.event.inputs.skip-compression, 'true') }}
    - name: Convert mscz to compressed svg:s
      working-directory: ./music
      run: ./convert.sh --compress --no-move --force
      if: ${{ !contains(github.event.inputs.skip-compression, 'true') }}
    - name: Perpare for export
      working-directory: ./music
      run: mv svgs.json svg
    - name: Archive production artifacts
      uses: actions/upload-artifact@v2
      with:
        name: music-svgs
        path: music/svg

  compression-benchmark:
    runs-on: ubuntu-latest
    name: Check compression ratios
    needs: sheet-music
    steps:
    - uses: actions/checkout@v2
    - name: Install Zopfli
      run: sudo apt-get install -y zopfli
    - name: Fetch sheet music artifacts
      uses: actions/download-artifact@v2
      with:
        name: music-svgs
        path: .github/workflows/svg
    - name: Benchmark
      working-directory: .github/workflows
      run: ./compression-benchmark.sh

  docker:
    runs-on: ubuntu-latest
    name: Build docker container (nginx)
    needs: sheet-music
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Fetch sheet music artifacts
        uses: actions/download-artifact@v2
        with:
          name: music-svgs
          path: public/msvg
      - name: Unpack sheet music artifacts
        working-directory: public/msvg
        run: mv svgs.json ../../src/assets/msvgs.json
      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: | 
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=ref,event=branch
            type=edge,branch=vue
            type=sha
      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}