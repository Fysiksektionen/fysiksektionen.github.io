user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '[$time_local] - $status - ($http_accept_encoding -> $sent_http_content_encoding) - $remote_addr/$http_x_forwarded_for - $request'
                      #'$remote_addr - [$time_local] "$request" '
                      #'- $status ($http_accept_encoding -> $sent_http_content_encoding, ${body_bytes_sent}B) '
                      #'- "$http_referer" "$http_x_forwarded_for" "$http_user_agent"';
                      # $request_time, "$sent_http_content_encoding" "$http_accept_encoding"

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65s;

    server {
        listen       80;
        listen  [::]:80;
        server_name  localhost;

        #access_log  /var/log/nginx/host.access.log  main;

        location / {
            root   /usr/share/nginx/html/sangbok;
            index  index.html index.htm;

            # I expect most clients to support gzip encoding, hence we can store the static files gzip-compressed
            # and decompress dynamically if the client does not support it.
            # See https://blog.llandsmeer.com/tech/2019/08/29/precompression.html
            gzip on;
            gzip_types text/plain text/xml application/xml application/javascript text/css image/svg+xml image/x-icon; # text/html is enabled by default, so we don't need to enable it explicitly
            gzip_static always;
            gunzip on;

            brotli on;
            brotli_types text/plain text/xml application/xml application/javascript text/css image/svg+xml image/x-icon;
            brotli_static off; # We only store gzip:s, not br:s, as of now, hence we only use dynamic re-encoding.

            ##
            ## Caching
            ##
            add_header Cache-Control public;

            # These files have hashed filenames, hence there's no need to ask the server if they have changed
            # since if they have, they will have a different name.
            location ~* \.(?:css|js|min.svg)$ {expires 1M;}
            location ~* /msvg/.*/\.svg$ {expires 1M;}
        }


        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }
}