{"version":3,"file":"js/listview.637b53aa.js","mappings":"mOAeA,cAAeA,EAAAA,EAAAA,IAAgB,CAC7BC,KAAM,WACNC,QAAU,MAAO,CAAEC,OAAOC,EAAAA,EAAAA,IAASC,EAAAA,IAAO,EAC1CC,OACE,MAAMC,GAAiCC,EAAAA,EAAAA,MACjCC,GAAUC,EAAAA,EAAAA,IAAUH,EAAMI,OAAOC,QACjCT,GAAQC,EAAAA,EAAAA,IAASC,EAAAA,IACvB,MAAO,CACLI,UACAI,WAAW,EACXC,aAASC,EAETd,KAAME,EAAMa,MAAMC,MAAMR,GAASR,KACjCiB,YAAaf,EAAMa,MAAMC,MAAMR,GAASS,YAE5C,EACAC,SAAU,CAERC,OACE,MAAMjB,GAAQC,EAAAA,EAAAA,IAASC,EAAAA,IACjBE,GAAiCC,EAAAA,EAAAA,MAEjCC,GAAUC,EAAAA,EAAAA,IAAUH,EAAMI,OAAOC,QACjCQ,EAAiBjB,EAAMa,MAAMC,MAAMR,GACzC,MAAO,IAAKW,EAAMC,OAAOC,EAAAA,EAAAA,IAAwBF,EAAKC,OACxD,EAEAE,OACE,OAAOC,OAAOC,SAASC,OAASF,OAAOC,SAASE,SAAW,cAAgBC,UAAUC,KAAKC,UAAU,IAAKC,KAAKX,KAAMC,MAAOU,KAAKX,KAAKC,MAAMW,KAAIC,GAAKA,EAAEC,UACxJ,GAEFC,QAAS,CACPC,cAAa,KACbC,aAAaC,GAEI,SAAdA,GAAyBP,KAAKQ,QAAQC,IAAI,EAC7C,EAEAC,aAAaC,GACXX,KAAKQ,QAAQI,KAAK,SAAWZ,KAAKa,OAAOjC,OAAOC,OAAS,SAAW8B,EACtE,EAEAG,aACEd,KAAK5B,MAAM2C,OAAO,cAAe,CAAE1B,KAAMW,KAAKtB,QAASR,KAAM8B,KAAK9B,KAAMiB,YAAaa,KAAKb,aAC5F,EAEA6B,gBAEEhB,KAAK5B,MAAM2C,OAAO,SAClB,MAAME,EAAIjB,KAAKX,KACf,IAAK,MAAM6B,KAAQD,EAAE3B,MACnB4B,GAAQlB,KAAK5B,MAAM2C,OAAO,MAAOG,EAAKf,OAExCH,KAAK5B,MAAM2C,OAAO,kBAAmB,CAAEzC,IAAK,YAAa6C,OAAO,GAClE,EAEAC,eACEpB,KAAKlB,WAAY,EACjB,MAAMuC,QAAe,mCACrBrB,KAAKjB,cAAgBsC,EAAOC,UAAUtB,KAAKR,KAC7C,EAEA+B,WACE,MAAMC,EAAUC,IAAKzB,KAAKR,MACtBgC,IACFxB,KAAKlB,WAAY,EAErB,GAEF4C,SACE,OAAO,QAAC,yBAAR,aACwB1B,KAAKM,aAAY,MAAQ,QAAM,oCACxC,QAAM,CAEdN,KAAK5B,MAAMa,MAAM0C,SAASC,WAAY,kBAAJ,MAAkB,cAAa,QAAU5B,KAAKgB,cAAa,MAAQ,kBAAgB,mBAAY,wBACpH,eAAc,QAAUhB,KAAK6B,OAAM,MAAQ,QAAM,mBAG7D7B,KAAK5B,MAAMa,MAAM0C,SAASC,WAAQ,qBACvB,kBAAgB,qBACpB5B,KAAKX,KAAKnB,QAAI,mBACV,uBAAqB,CAAE8B,KAAKX,KAAKF,gBAI7Ca,KAAK5B,MAAMa,MAAM0C,SAASC,WAAQ,qBACtB,uCAAqC,iCAClC,OAAM,MAAO,YAAW,yBAAU5B,KAAK9B,KAAI,UAAW8B,KAAKc,WAAU,YAAc,eAAc,MAAO,wBAAsB,aAA5Fd,KAAK9B,SAAI,wDAE3C,OAAM,MAAO,YAAW,yBAAU8B,KAAKb,YAAW,UAAWa,KAAKc,WAAU,YAAc,eAAa,aAArEd,KAAKb,kBAC/C,uBAIK,YAAU,CACpBa,KAAKX,KAAKC,MAAMW,KAAI,CAACiB,EAAMP,KAAQ,kCAAL,MACnB,QAAO,UAASO,EAAKf,MAAK,QAAW,IAAMH,KAAKU,aAAaC,IAAI,2BACjE,OAAM,QAAU,IAAMX,KAAKU,aAAaC,IAAI,4BACtCO,EAAKY,OAAK,OACvBzB,EAAAA,EAAAA,IAAca,IAASlB,KAAK5B,MAAMa,MAAM0C,SAASI,aAAe/B,KAAK5B,MAAMa,MAAM0C,SAASC,WAAQ,sBACrF,kBAAgB,oBAG/B5B,KAAK5B,MAAMa,MAAM0C,SAASC,WAAY,cAAJ,MAAc,QAAM,wBACxC,CAAEI,WAAW,EAAMC,IAAI,EAAMC,SAAkB,IAARvB,GAAW,QACpD,IAAMX,KAAK5B,MAAM2C,OAAO,aAAc,CAAE1B,KAAMW,KAAKtB,QAASyB,MAAOQ,EAAKJ,WAAY,KAAI,wCACtF,CAAEyB,WAAW,EAAMG,MAAM,EAAMD,SAAUvB,IAAQX,KAAKX,KAAKC,MAAM8C,OAAS,GAAG,QAC/E,IAAMpC,KAAK5B,MAAM2C,OAAO,aAAc,CAAE1B,KAAMW,KAAKtB,QAASyB,MAAOQ,EAAKJ,UAAW,KAAI,wCACtF,mBAAkB,QACnB,IAAMP,KAAK5B,MAAM2C,OAAO,iBAAkB,CAAE1B,KAAMW,KAAKtB,QAASyB,MAAOQ,KAAM,8BAQjGX,KAAKlB,YAAa,kBAAJ,oGAEF,uBAAqB,qBAAWkB,KAAKjB,QAAO,MAAQ,6CAA2C,iCAC5F,sBAAoB,uBACrB,kBAAiB,QAAUiB,KAAKuB,UAAQ,kDACxC,kBAAiB,QAAU,KAAQvB,KAAKlB,WAAY,CAAK,GAAE,4BAK9E,G,oFCnIF,cAAeb,EAAAA,EAAAA,IAAgB,CAC7BC,KAAM,YACNmE,WAAY,CACVC,OAAMA,EAAAA,GAER/D,OACE,MAAO,CACLW,OAAOb,EAAAA,EAAAA,IAASC,EAAAA,IAAKW,MAAMC,MAE/B,EACAf,QACE,MAAO,CAAEC,OAAOC,EAAAA,EAAAA,IAASC,EAAAA,IAC3B,EACA8B,QAAS,CACPE,aAAcC,GAAiD,SAAdA,GAAyBP,KAAKQ,QAAQI,KAAK,IAAK,EAEjG2B,UACEvC,KAAK5B,MAAM2C,OAAO,UACpB,EAEAyB,WAAW7B,GACTX,KAAK5B,MAAM2C,OAAO,aAAcJ,EAClC,GAEFe,SACE,OAAO,QAAC,KAAR,aACwB1B,KAAKM,aAAY,MAAQ,QAAM,oCACxC,QAAM,CAEdN,KAAK5B,MAAMa,MAAM0C,SAASC,WAAY,kBAAJ,MAAkB,cAAa,QAAU5B,KAAKuC,SAAO,kBAAY,gEAIvF,YAAU,CACpBvC,KAAKd,MAAMe,KAAI,CAACZ,EAAMsB,KAAG,wCAEZ,QAAO,QAAU,IAAMX,KAAKQ,QAAQI,KAAK,SAAWD,IAAI,CAC9DtB,EAAKnB,QAAI,oBAEH,OAAM,QAAU,IAAM8B,KAAKQ,QAAQI,KAAK,SAAWD,IAAI,CAC7DtB,EAAKF,cAGRa,KAAK5B,MAAMa,MAAM0C,SAASC,WAAY,cAAJ,MAAc,QAAM,wBACxC,CAAEI,WAAW,EAAMC,IAAI,EAAMC,SAAkB,IAARvB,GAAW,QACpD,IAAMX,KAAK5B,MAAM2C,OAAO,WAAY,CAAEZ,MAAOQ,EAAKJ,WAAY,KAAI,wCAChE,CAAEyB,WAAW,EAAMG,MAAM,EAAMD,SAAUvB,IAAQX,KAAKd,MAAMkD,OAAS,GAAG,QAC1E,IAAMpC,KAAK5B,MAAM2C,OAAO,WAAY,CAAEZ,MAAOQ,EAAKJ,UAAW,KAAI,wCAChE,mBAAkB,QACnB,IAAMP,KAAKwC,WAAW7B,IAAI,6BAQrD,G,sDChEF,SAAS8B,EAAyBC,GAChC,OAAQA,EAASC,MAAM,sBAAwB,CAAC,GAAI,KAAK,EAC3D,CAGA,SAASC,EAAcC,GACrB,MAAMC,EAAcC,EAAAA,QAAe7C,GAAc2C,GAAU3C,EAAE8C,QAAQH,IAAW,IAC1EI,EAAaC,MAAMC,KAAK,IAAIC,IAAIN,EAAY7C,IAAIwC,KACtD,OAAOQ,EAAWI,MACpB,CAGA,SAASC,EAAsBT,EAAgBU,GAC7C,MAAMT,EAAcC,EAAAA,QAAe7C,GAAc2C,GAAU3C,EAAE8C,QAAQH,IAAW,IAC1EW,EAAsBV,EAAYW,QAAOvD,GAAKuC,EAAyBvC,KAAO0C,EAAcC,GAAQU,KAKpGG,EAA4DC,EAAAA,EAClE,OAAOH,EAAoBvD,KAAIC,GAAKwD,EAAO,QAAUxD,GACvD,CAGA,cAAejC,EAAAA,EAAAA,IAAgB,CAC7BC,KAAM,qBACN0F,MAAO,CAAEC,IAAKC,QACdvF,OAEE,MAAMwF,EAAO/D,KAAK6D,KAAO7D,KAAK6D,KAAKG,SAAS,KAAO,GAAK,KACxD,MAAO,CACLD,OACAE,WAAW,EACXV,QAASW,KAAKC,IAAM1E,OAAO2E,YAAc3E,OAAO2E,WAAW,sCAAsCC,QAAY,EAAI,EAAGzB,EAAcmB,GAAM3B,OAAS,GAErJ,EACAhC,QAAS,CAKPkE,KAAKC,GACHvE,KAAKuD,SAAWgB,EAChBvE,KAAKuD,QAAUW,KAAKM,IAAI,EAAGN,KAAKC,IAAInE,KAAKuD,QAASX,EAAc5C,KAAK+D,MAAM3B,OAAS,GACtF,GAEFV,SACE,OAAO,eAAP,MACa,kCAAgC,uBAE9B,uBAAqB,4BACb,IAAM1B,KAAKsE,MAAM,GAAE,MAAS,CAAEG,QAAQ,EAAMvC,SAA2B,IAAjBlC,KAAKuD,UAAe,8CAC1E,IAAMvD,KAAKsE,KAAK,GAAE,MAC1B,CAAEG,QAAQ,EAAMvC,SAAUlC,KAAKuD,UAAYX,EAAc5C,KAAK+D,MAAM3B,OAAS,IAAG,qBAI1FkB,EAAsBtD,KAAK+D,KAAM/D,KAAKuD,SAAStD,KAAKyE,IAAG,wCAE1CA,EAAG,IAAO1E,KAAKiE,UAAY,YAAc,QAAO,OAAU,KAAQjE,KAAKiE,WAAY,CAAK,GAAE,UAI7C,IAA1DX,EAAsBtD,KAAK+D,KAAM/D,KAAKuD,SAASnB,SAAY,8EAGjD,uBAAqB,8IAM/BpC,KAAKiE,YAAS,mEAGT,mBAEG,UAAQ,6CAGvB,G","sources":["webpack://sangbok/./src/views/List.tsx","webpack://sangbok/./src/views/Lists.tsx","webpack://sangbok/./src/views/song/SheetMusicRenderer.tsx"],"sourcesContent":["import './List.scss'\n\nimport { defineComponent } from 'vue'\nimport { useStore } from 'vuex'\nimport { useRoute, RouteLocationNormalized } from 'vue-router'\nimport copy from 'copy-to-clipboard'\nimport { key } from '@/store'\nimport { SongList } from '@/store/lists'\n\nimport Swiper from '@/components/Swiper' // @ is an alias to /src\nimport Modal from '@/components/Modal'\nimport { SwipeIndicatorState } from '@/utils/swipe'\nimport { param2int, getSongsByStringIndices, hasSheetMusic } from '@/lyrics'\n\n/** View to list all songs in a chapter. */\nexport default defineComponent({\n  name: 'ListView',\n  setup() { return { store: useStore(key) } },\n  data() {\n    const route: RouteLocationNormalized = useRoute()\n    const listIdx = param2int(route.params.listId)\n    const store = useStore(key)\n    return {\n      listIdx,\n      qrVisible: false,\n      qrImage: undefined as string | undefined,\n      // Only used for updates. This initialization method may be problematic if this view is used as a component (which it's not supposed to be).\n      name: store.state.lists[listIdx].name,\n      description: store.state.lists[listIdx].description\n    }\n  },\n  computed: {\n    /** @returns The current list object, as well as the list songs. */\n    list() {\n      const store = useStore(key)\n      const route: RouteLocationNormalized = useRoute()\n\n      const listIdx = param2int(route.params.listId)\n      const list: SongList = store.state.lists[listIdx]\n      return { ...list, songs: getSongsByStringIndices(list.songs) }\n    },\n    /** @returns A link that can be used to share the list. */\n    link(): string {\n      return window.location.origin + window.location.pathname + '#/list/add/' + encodeURI(JSON.stringify({ ...this.list, songs: this.list.songs.map(s => s.index) }))\n    }\n  },\n  methods: {\n    hasSheetMusic,\n    swipeHandler(direction: SwipeIndicatorState) {\n      // Go back one step if the user swipes to the right (which shows the indicator on the 'left')\n      (direction === 'left') && this.$router.go(-1)\n    },\n    /** Sends the user to a song in the list. */\n    clickHandler(idx: number) {\n      this.$router.push('/list/' + this.$route.params.listId + '/song/' + idx)\n    },\n    /** Updates the stored list name and description. */\n    updateMeta() {\n      this.store.commit('setListMeta', { list: this.listIdx, name: this.name, description: this.description })\n    },\n    /** Sends the user to the sångblad generator, with the list songs added. */\n    goToGenerator() {\n      // Clear generator stuff\n      this.store.commit('clear')\n      const l = this.list\n      for (const song of l.songs) { // TODO: Not really efficient (O(n^2)), but it will do for now\n        song && this.store.commit('add', song.index)\n      }\n      this.store.commit('toggleSettingTo', { key: 'generator', value: true })\n    },\n    /** Shows the sharing modal, with a QR code. */\n    async showQR() {\n      this.qrVisible = true\n      const QRCode = await import(/* webpackChunkName: \"qrcodelib\" */ 'qrcode')\n      this.qrImage = await QRCode.toDataURL(this.link)\n    },\n    /** Copies the sharing link to the user's clipboard. */\n    copyLink() {\n      const success = copy(this.link)\n      if (success) {\n        this.qrVisible = false\n      }\n    }\n  },\n  render() {\n    return (<>\n      <Swiper swipeHandler={this.swipeHandler} right=\"hide\">\n        <div class=\"main\">\n          {/* Action buttons */}\n          {this.store.state.settings.makelist && <button class=\"button left\" onClick={this.goToGenerator} title=\"Skapa sångblad\">🖶</button>}\n          <button class=\"button right\" onClick={this.showQR} title=\"Dela\">📤</button>\n\n          {/* Title */}\n          {!this.store.state.settings.makelist &&\n            <div class=\"titlecontainer\">\n              <h2>{this.list.name}</h2>\n              <p style=\"text-align: center;\">{this.list.description}</p>\n            </div>}\n\n          {/* If we are in the list-editing view, we display a name and description editor instead. */}\n          {this.store.state.settings.makelist &&\n            <div style=\"text-align: center;margin-top: 1em;\">\n              <input type=\"text\" class=\"secondary\" v-model={this.name} onKeyup={this.updateMeta} placeholder=\"Listans namn\" style=\"margin-bottom:0.5em;\" />\n              <br />\n              <input type=\"text\" class=\"secondary\" v-model={this.description} onKeyup={this.updateMeta} placeholder=\"Beskrivning\" />\n            </div>\n          }\n\n          {/* List songs */}\n          <table class=\"songbook\">\n            {this.list.songs.map((song, idx) => <tr>\n              <td class=\"index\" v-html={song.index} onClick={() => this.clickHandler(idx)}></td>\n              <td class=\"name\" onClick={() => this.clickHandler(idx)}>\n                <span v-html={song.title}></span>\n                {hasSheetMusic(song) && this.store.state.settings.sheetmusic && !this.store.state.settings.makelist &&\n                  <span class=\"sheetmusicicon\">𝄢</span> /* 𝄞 */}\n              </td>\n              {/* Song order editing controls. */}\n              {this.store.state.settings.makelist && <td class=\"icon\">\n                <span class={{ operation: true, up: true, disabled: idx === 0 }}\n                  onClick={() => this.store.commit('moveInList', { list: this.listIdx, index: idx, direction: -1 })}>▲</span>\n                <span class={{ operation: true, down: true, disabled: idx === this.list.songs.length - 1 }}\n                  onClick={() => this.store.commit('moveInList', { list: this.listIdx, index: idx, direction: 1 })}>▼</span>\n                <span class=\"operation delete\"\n                  onClick={() => this.store.commit('deleteFromList', { list: this.listIdx, index: idx })}>✖</span>\n              </td>}\n            </tr>)}\n          </table>\n        </div>\n      </Swiper>\n\n      {/* Sharing modal */}\n      {this.qrVisible && <Modal>\n        <header><h3>Dela</h3></header>\n        <div style=\"text-align: center;\"><img src={this.qrImage} style=\"text-align: center; filter: invert(0.87);\" /></div>\n        <footer style=\"margin-top: 0.5em;\">\n          <div class=\"button button-2\" onClick={this.copyLink}>Kopiera länk</div>\n          <div class=\"button button-2\" onClick={() => { this.qrVisible = false }}>Avbryt</div>\n        </footer>\n      </Modal>}\n    </>\n    )\n  }\n})\n","\nimport './Lists.scss'\n\nimport { defineComponent } from 'vue'\nimport { useStore } from 'vuex'\nimport { key } from '@/store'\n\nimport Swiper from '@/components/Swiper' // @ is an alias to /src\nimport { SwipeIndicatorState } from '@/utils/swipe'\n\n/** View for showing all lists. */\nexport default defineComponent({\n  name: 'ListsView',\n  components: {\n    Swiper\n  },\n  data() {\n    return {\n      lists: useStore(key).state.lists // .filter(l => l.songs.length > 0), // TODO: Show icon for empty list\n    }\n  },\n  setup() {\n    return { store: useStore(key) }\n  },\n  methods: {\n    swipeHandler (direction: SwipeIndicatorState) { (direction === 'left') && this.$router.push('/') },\n    /** Creates a new list. */\n    newList() {\n      this.store.commit('newList')\n    },\n    /** Deletes a list, given by the parameter `idx`. */\n    deleteList(idx: number) {\n      this.store.commit('deleteList', idx)\n    }\n  },\n  render() {\n    return (\n      <Swiper swipeHandler={this.swipeHandler} right=\"hide\">\n        <div class=\"main\">\n          {/* Title */}\n          {this.store.state.settings.makelist && <button class=\"button left\" onClick={this.newList}>+</button>}\n          <h2>Listor</h2>\n\n          {/* The list of lists. */}\n          <table class=\"songbook\">\n            {this.lists.map((list, idx) =>\n              <tr>\n                <td class=\"index\" onClick={() => this.$router.push('/list/' + idx)}>\n                  { list.name }\n                </td>\n                <td class=\"name\" onClick={() => this.$router.push('/list/' + idx)}>\n                  { list.description }\n                </td>\n                {/* List order editing */}\n                {this.store.state.settings.makelist && <td class=\"icon\">\n                  <span class={{ operation: true, up: true, disabled: idx === 0 }}\n                    onClick={() => this.store.commit('moveList', { index: idx, direction: -1 })}>▲</span>\n                  <span class={{ operation: true, down: true, disabled: idx === this.lists.length - 1 }}\n                    onClick={() => this.store.commit('moveList', { index: idx, direction: 1 })}>▼</span>\n                  <span class=\"operation delete\"\n                    onClick={() => this.deleteList(idx)}>✖</span>\n                </td>}\n              </tr>\n            )}\n          </table>\n        </div>\n      </Swiper>\n    )\n  }\n})\n","import './SheetMusicRenderer.scss'\nimport svglist from '@/assets/msvgs.json'\nimport { defineComponent } from 'vue'\n\nfunction getZoomLevelFromFileName(filename: string) {\n  return (filename.match(/-sf(\\d(\\.\\d+)?)-/i) || ['', ''])[1]\n}\n\n/** @returns The available zoom-levels for this song. */\nfunction getZoomLevels(source: string) {\n  const curSongSvgs = svglist.filter(s => { return source && s.indexOf(source) > -1 })\n  const zoomLevels = Array.from(new Set(curSongSvgs.map(getZoomLevelFromFileName)))\n  return zoomLevels.sort()\n}\n\n/** @returns The images of the current song, for specified zoom-level. */\nfunction getImagesForZoomLevel(source: string, zoomIdx: number): string[] {\n  const curSongSvgs = svglist.filter(s => { return source && s.indexOf(source) > -1 })\n  const curSongSvgsWithZoom = curSongSvgs.filter(s => getZoomLevelFromFileName(s) === getZoomLevels(source)[zoomIdx])\n\n  // __webpack_public_path__ is undefined in our testing environment. This is a Goodhart-style fix to that.\n  // TODO: find a way to define __webpack_public_path__ in the testing code instead.\n  // eslint-disable-next-line\n  const root = (typeof __webpack_public_path__ !== 'string') ? '' : __webpack_public_path__\n  return curSongSvgsWithZoom.map(s => root + 'msvg/' + s)\n}\n\n/** Component that renders sheet music. */\nexport default defineComponent({\n  name: 'SheetMusicRenderer',\n  props: { src: String },\n  data() {\n    // The dot needs to be here, otherwise, songs like ζ1 may think it has ζ11 as sheet music.\n    const src2 = this.src + (this.src?.endsWith('.') ? '' : '.')\n    return {\n      src2,\n      isLoading: true,\n      zoomIdx: Math.min(((window.matchMedia && window.matchMedia('only screen and (max-width: 760px)').matches)) ? 5 : 3, getZoomLevels(src2).length - 1)\n    }\n  },\n  methods: {\n  /**\n   * Alters the zoom index by `z`. Generally, a positive `z` will increase the zoom by `z` levels, and decrease if `z` is negative.\n   * @param z - the zoom index offset.\n   */\n    zoom(z: number) {\n      this.zoomIdx += z\n      this.zoomIdx = Math.max(0, Math.min(this.zoomIdx, getZoomLevels(this.src2).length - 1))\n    }\n  },\n  render() {\n    return (\n      <div class=\"component-sheet-music-renderer\">\n        {/* Zoom control buttons */}\n        <div class=\"zoombuttoncontainer\">\n          <button onClick={() => this.zoom(-1)} class={{ button: true, disabled: this.zoomIdx === 0 }}>&#128269;-</button>\n          <button onClick={() => this.zoom(1)}\n            class={{ button: true, disabled: this.zoomIdx === getZoomLevels(this.src2).length - 1 }}>&#128269;+</button>\n        </div>\n\n        {/* The svg images containing sheet music. Usually there will be only one (we had more previously). */}\n        {getImagesForZoomLevel(this.src2, this.zoomIdx).map((img) =>\n          <div>\n            <img src={img} alt={this.isLoading ? 'Laddar...' : 'Noter'} onLoad={() => { this.isLoading = false }} />\n          </div>)}\n\n        {/* Error messages */}\n        {getImagesForZoomLevel(this.src2, this.zoomIdx).length === 0 &&\n        <div>\n          <h2>Fel</h2>\n          <p style=\"text-align: center;\">\n            Inga noter hittades, trots att de borde finnas. Du borde skicka ett surt mail till webmaster eller sångbokens projektledare.\n          </p>\n        </div>}\n\n        {/* Loading message */}\n        {this.isLoading &&\n        <div>\n          <h2>Laddar...</h2>\n        </div>}\n\n        <p class=\"notice\">Notvisaren är experimentell.</p>\n      </div>\n    )\n  }\n})\n"],"names":["defineComponent","name","setup","store","useStore","key","data","route","useRoute","listIdx","param2int","params","listId","qrVisible","qrImage","undefined","state","lists","description","computed","list","songs","getSongsByStringIndices","link","window","location","origin","pathname","encodeURI","JSON","stringify","this","map","s","index","methods","hasSheetMusic","swipeHandler","direction","$router","go","clickHandler","idx","push","$route","updateMeta","commit","goToGenerator","l","song","value","async","QRCode","toDataURL","copyLink","success","copy","render","settings","makelist","showQR","title","sheetmusic","operation","up","disabled","down","length","components","Swiper","newList","deleteList","getZoomLevelFromFileName","filename","match","getZoomLevels","source","curSongSvgs","svglist","indexOf","zoomLevels","Array","from","Set","sort","getImagesForZoomLevel","zoomIdx","curSongSvgsWithZoom","filter","root","__webpack_public_path__","props","src","String","src2","endsWith","isLoading","Math","min","matchMedia","matches","zoom","z","max","button","img"],"sourceRoot":""}